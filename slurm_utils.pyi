import argparse
from collections import OrderedDict
from collections.abc import Collection, Sequence
from typing import Any, Optional

Params = OrderedDict[str, list[Any]]


def get_count(params: Params) -> int: ...
def read_toml(filename: str) -> OrderedDict[Any, Any]: ...
def read_paramfile(filename: str) -> Params: ...
def validate_param_dict(dict_lists: OrderedDict[Any, Any]) -> Params: ...
def count_product(lists: Sequence[Collection[Any]]) -> int: ...
def nth_product(index: int, lists: Sequence[Collection[Any]]) -> tuple[Any, ...]: ...
def get_array_argument(template: str, paramfile: str) -> str: ...
def overrides_to_dict(overrides: list[str]) -> OrderedDict[str, str]: ...
def get_sbatch_config(
    configfile: str, overrides: Optional[list[str]]
) -> dict[str, str]: ...
def substitute_nth(nth: int, params: Params, command: str) -> str: ...
def make_sbatch_headers(config: dict[str, str]) -> str: ...
def make_batchfile_contents(
    setup: str, command: str, paramfile: str, config: dict[str, str]
) -> str: ...
def write_sbatch_file(
    batchfile_contents: str, sbatch_filename: Optional[str]
) -> str: ...
def write_sbatch_named_file(
    batchfile_contents: str, sbatch_filename: str
) -> None: ...
def write_sbatch_temporary_file(batchfile_contents: str) -> str: ...

def build_parser() -> argparse.ArgumentParser: ...
def parse_args() -> argparse.Namespace: ...
def main() -> None: ...
